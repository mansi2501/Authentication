{"ast":null,"code":"var _jsxFileName = \"/Users/indianic/Desktop/Mansi/Authentication/src/components/Auth/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const history = useHistory();\n  const authCtx = useContext(AuthContext);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    setIsLoading(true);\n    let url;\n\n    if (isLogin) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAcOXIDp0UnB1l9OGboU7mDupzr4KxnQ2s';\n    } else {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAcOXIDp0UnB1l9OGboU7mDupzr4KxnQ2s';\n    }\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      setIsLoading(false);\n\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = 'Authentication failed!'; // if(data && data.error && data.error.message)\n          // {\n          //   errorMessage = data.error.message;\n          // }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      const expirationTime = new Date(new Date().getTime() + +data.expirasIn * 1000);\n      authCtx.login(data.idToken, expirationTime.toISOString());\n      history.replace('/');\n    }).catch(err => {\n      alert(err.message);\n      alert(\"Hello\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? 'Login' : 'Sign Up'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          ref: emailInputRef,\n          id: \"email\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          ref: passwordInputRef,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? 'Login' : 'Create Account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 26\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sending request...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? 'Create new account' : 'Login with existing account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"Oe0UlO1IKjw6ZnacUdoOFZyixn0=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/Users/indianic/Desktop/Mansi/Authentication/src/components/Auth/AuthForm.js"],"names":["useRef","useState","useContext","useHistory","AuthContext","classes","AuthForm","isLogin","setIsLogin","isLoading","setIsLoading","emailInputRef","passwordInputRef","history","authCtx","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","errorMessage","Error","expirationTime","Date","getTime","expirasIn","login","idToken","toISOString","replace","catch","err","alert","message","auth","control","actions","toggle"],"mappings":"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","sourcesContent":["import { useRef, useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const history = useHistory();\n  const authCtx = useContext(AuthContext)\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = (event) =>{\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    setIsLoading(true)\n\n    let url;\n\n    if(isLogin){\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAcOXIDp0UnB1l9OGboU7mDupzr4KxnQ2s'\n    }\n    else{\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAcOXIDp0UnB1l9OGboU7mDupzr4KxnQ2s'\n    }\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(res=>{\n      setIsLoading(false);\n      if(res.ok){\n        return res.json();\n      }\n      else{\n          return res.json().then((data) => {\n            let errorMessage = 'Authentication failed!' \n\n            // if(data && data.error && data.error.message)\n            // {\n            //   errorMessage = data.error.message;\n            // }\n            throw new Error(errorMessage);\n          });\n      }\n    }).then((data) => {\n      const expirationTime = new Date(new Date().getTime() +  (+data.expirasIn * 1000))\n      authCtx.login(data.idToken, expirationTime.toISOString());\n      history.replace('/')\n    }).catch(err=>{\n      alert(err.message);\n      alert(\"Hello\")\n    });\n  }\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor='email'>Your Email</label>\n          <input type='email' ref={emailInputRef} id='email' required />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='password'>Your Password</label>\n          <input type='password' id='password' ref={passwordInputRef} required />\n        </div>\n        <div className={classes.actions}>\n         {!isLoading &&  <button>{isLogin ? 'Login' : 'Create Account'}</button>}\n         {isLoading && <p>Sending request...</p>}\n          <button\n            type='button'\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? 'Create new account' : 'Login with existing account'}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}